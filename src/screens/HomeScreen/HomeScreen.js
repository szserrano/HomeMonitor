import React, { useEffect, useState } from 'react';
import { FlatList, Keyboard, Text, TextInput, TouchableOpacity, View } from 'react-native';
import styles from './styles';
import axios from "axios";
import { signOut } from 'firebase/auth';
import { collection, query, where, doc, getDoc, getDocs, addDoc, updateDoc, onSnapshot, setDoc } from 'firebase/firestore';
import { db, auth } from '../../firebase/config';
import { useNavigation } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';

const Stack = createStackNavigator();

export default function HomeScreen(props) {
    // Loading variable to fetch data
    const [loading, setLoading] = useState(true);

    // Used in Adding/Leaving a house in onAddButtonPress function
    const [entityTextAdd, setEntityTextAdd] = useState('');
    const [entityTextLeave, setEntityTextLeave] = useState('');

    // Used in useEffect call in order to display houses that a user is a member of
    const [entities, setEntities] = useState([]);
    
    // Used in fetchData function 
    const [entranceData, setEntranceData] = useState({});
    const [entranceChangeID, setEntranceChangeID] = useState('1');

    // Populate entityRef (houses collection reference for house entities with matching houseIDs)
    const userID = props.extraData.id;
    const userEmail = props.extraData.email;
    const userName = props.extraData.fullName;

    const userRef = doc(db, 'users', `${userID}`); // User reference for firebase access
    const colRef = collection(db, 'users', `${userID}`, 'houseIDs'); // Collection reference for a specific user's houseIDs collection for firebase access
    const entranceColRef = collection(db, 'entrances'); // Collection reference for entrances collection for firebase access

    // Use the navigation from App.js
    const navigation = useNavigation();

    useEffect(() => {
        // Function to fetch data from webhook.site of new entrance update
        const fetchData = async () => {
            // GET request sent to webhook.site using unique token generated by webhook.site 
            //fetch('http://webhook.site/token/007347fc-f34d-4286-88d8-a10bbb8b2292/request/latest')
            setLoading(true);
            try{
                const response = await axios.get('http://webhook.site/token/007347fc-f34d-4286-88d8-a10bbb8b2292/request/latest');
                // If there is no new data to be handled, then do nothing
                var values = JSON.parse(response.data.content);
                console.log("entranceChangeID before if:", entranceChangeID);
                console.log("response.data.uuid", response.data.uuid);
                if(entranceChangeID != response.data.uuid){
                    var data = {
                        name: values.value2,
                        status: values.value1,
                        created_at: response.data.created_at,
                        token_id: response.data.token_id,
                        changed: true
                    };
                    setEntranceData(data);
                    setEntranceChangeID(response.data.uuid);
                    console.log("entranceChangeID != response.data.uuid. Now we set it:", entranceChangeID);
                    console.log("New update jus dropped: ", entranceData);
                }
                else {
                    var data = {
                        name: values.value2,
                        status: values.value1,
                        created_at: response.data.created_at,
                        token_id: response.data.token_id,
                        changed: false
                    };
                    setEntranceData(data);
                    setEntranceChangeID(response.data.uuid);
                    console.log("No new entrance data to handle, changed flag set to false: ", entranceData);
                }
            } catch (error) {
                console.error(error.message);
            }
            setLoading(false);
        }

        function getHousesForEachPost(houseIDDocSnaps) {
            return Promise.all(
                houseIDDocSnaps.map(async (houseIDDocSnap) => {
                    const houseData = houseIDDocSnap.data();

                    const houseDocRef = doc(db, 'houses', houseData.houseID);
                    const houseDocSnap = await getDoc(houseDocRef);
            
                    return {
                        id: houseIDDocSnap.id,
                        ...houseDocSnap.data(),
                    };
                })
            )
        }

        // Function to find if our entrance exists or not (FOR IF STATEMENT ON LINE 114)
        const queryEntrances = async () => {
            const q = query(entranceColRef, where("name", "==", `${entranceData.name}`));
            const querySnapshot = await getDocs(q);
            if(querySnapshot.empty){ // If no documents were found, 
                // return null or some flag that denotes that there is no entrance that exists
                return "N/A";
            }
            else{
                querySnapshot.forEach((doc) => {
                    console.log(doc.data().id); // output id of document
                    return doc.data().id;
                })
            }
        }

        //Get the latest update on an entrance via the site 
        //update = setInterval(fetchData, 30000)
        fetchData();

        // We query firestore to see if there is an entrance with name entranceData.name
        var entranceID = "N/A";//queryEntrances();

        // If our entranceData is different, we add/modify the entrance document
        /*if(entranceData.changed == true && entranceID != "N/A"){
            //call setDoc on appropriate entrance document
            setDoc(doc(entranceColRef, entranceID), {
                        entranceID,
                        ...entranceData,
                    })
                    .then(() => console.log("Entrance updated: ", doc(entranceColRef, entranceID).data().entranceID))
                    .catch((error) => {
                        console.log('error in RegistrationScreen.js creating a new user w email/pass')
                        alert(error)
                        console.log(error)
                    });
        }
        else {
            addDoc(entranceColRef, {...entranceData})
            .then((docRef) => {
                updateDoc(docRef, {
                    id: docRef.id,
                });
            });
        }*/
        
        let cancelPreviousPromiseChain = undefined;
        // Snapshot of houseIDs collection in users object 
        const unsubscribe = onSnapshot(colRef, 
            (snapshot) => {
                if(cancelPreviousPromiseChain) cancelPreviousPromiseChain(); // Cancel previous run if possible

                let cancelled = false; 
                cancelPreviousPromiseChain = () => cancelled = true;

                getHousesForEachPost(snapshot.docs)
                .then((entitiesArray) => {
                    if(cancelled) return; // cancelled, do nothing
                    setLoading(false);
                    setEntities(entitiesArray);
                })
                .catch((error) => {
                    if(cancelled) return; // cancelled, do nothing
                    setLoading(false);
                    console.log("UNDEFINED POSSIBLY?",error)
                })
            }, 
            (error) => {
                if(cancelPreviousPromiseChain) cancelPreviousPromiseChain(); // Now the listener has errored, cancel using any stale data
                setLoading(false);
                console.log(error);
            }
        );

        return () => {
            unsubscribe(); // detaches the listener

        }
    }, []);

    console.log("entities:", entities);
    
    const onAddButtonPress = () => {
        // Adding a new house
        if(entityTextAdd && entityTextAdd.length > 0) {
            const houseRef = query(collection(db, 'houses'), where('houseID', '==', `${entityTextAdd}`));
            console.log(houseRef);
            if(houseRef) { // If the house reference exists, set the user doc to have the houseID
                const data = {
                    houseID: entityTextAdd
                };
                const houseIDsDocRef = doc(db, 'users', `${userID}`, 'houseIDs', `${entityTextAdd}`);
                setDoc(houseIDsDocRef, data)
                    .then(_doc => {
                        setEntityTextAdd('');
                        Keyboard.dismiss();
                        alert("Joined existing house");
                    })
                    .catch((error) => {
                        alert(error);
                    });
            }
            else {
                alert("No existing house");
            }
        }
    }

    const onLeaveButtonPress = () => {
        /*if (entityTextLeave && entityTextLeave.length > 0) {
            const data = {
                title: entityText,
                ownerID: userID,
                openBool: false
            };
            addDoc(entityRef, data)
                .then(_doc => {
                    setEntityText('')
                    Keyboard.dismiss()
                })
                .catch((error) => {
                    alert(error)
                });
        }*/
        console.log("Implement");
    }

    const onChatButtonPress = () => {
        return( // Creating a new stack navigator
            navigation.navigate('Chat')
        );
    }

    const onLogoutButtonPress = () => {
        signOut(auth)
            .then(() => {
                alert("You have been logged out");
            })
            .catch((err) => {
                console.log(err);
            });
    }

    const renderEntity = ({item, index}) => {
        return (
            <View style={styles.entityContainer}>
                <Text style={styles.entityTextAdd}>
                    {index+1}. {"\t"} {item.name} {"\n"} HouseID: {item.houseID}
                </Text>
            </View>
        );
    }

    return (
        <View style={styles.container}>
            <TouchableOpacity style={styles.button} onPress={onLogoutButtonPress}>
                <Text style={styles.buttonText}>Logout</Text>
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.button} onPress={onChatButtonPress}>
                <Text style={styles.buttonText}>Chat</Text>
            </TouchableOpacity>

            <View style={styles.formContainer}>
                <TextInput
                    style={styles.input}
                    placeholder='Join/create a new house'
                    placeholderTextColor="#aaaaaa"
                    onChangeText={(text) => setEntityTextAdd(text)}
                    value={entityTextAdd}
                    underlineColorAndroid="transparent"
                    autoCapitalize="none"
                />
                <TouchableOpacity style={styles.button} onPress={onAddButtonPress}>
                    <Text style={styles.buttonText}>Add</Text>
                </TouchableOpacity>
            </View>

            <View style={styles.formContainer}>
                <TextInput
                    style={styles.input}
                    placeholder='Leave a house'
                    placeholderTextColor="#aaaaaa"
                    onChangeText={(text) => setEntityTextLeave(text)}
                    value={entityTextLeave}
                    underlineColorAndroid="transparent"
                    autoCapitalize="none"
                />
                <TouchableOpacity style={styles.button} onPress={onLeaveButtonPress}>
                    <Text style={styles.buttonText}>Leave</Text>
                </TouchableOpacity>
            </View>
            {loading && <Text>Loading</Text>}
            { !loading && (entities && (
                <View style={styles.listContainer}>
                    <FlatList
                        data={entities}
                        renderItem={renderEntity}
                        keyExtractor={(item) => item.id}
                        removeClippedSubviews={true}
                        ListHeaderComponent={()=><Text>{userName}'s Houses</Text>}
                    />
                </View>)
            )}
        </View>
    );
}