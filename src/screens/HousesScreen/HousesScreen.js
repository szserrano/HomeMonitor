import React, { useEffect, useState } from 'react';
import { Pressable, Modal, FlatList, Keyboard, Text, TextInput, TouchableOpacity, View } from 'react-native';
import styles from './styles';
import axios from "axios";
import { signOut } from 'firebase/auth';
import { collection, query, where, doc, getDoc, getDocs, addDoc, onSnapshot, setDoc, updateDoc } from 'firebase/firestore';
import { db, auth } from '../../firebase/config';
import { useNavigation } from '@react-navigation/native';

export default function HousesScreen({route}) {
    const navigation = useNavigation();

    const userID = route.params.extraData.id

    // Used for showing modal
    const [modalVisible, setModalVisible] = useState(false);

    const [loading, setLoading] = useState(true);

    // Used in Adding/Leaving a house in onAddButtonPress function
    const [entityTextAdd, setEntityTextAdd] = useState('');
    const [entityTextCreate, setEntityTextCreate] = useState('');

    // Used to display entrances within the current house
    const [entrances, setEntrances] = useState([]);

    // Used in fetchData function 
    const [entranceData, setEntranceData] = useState({});
    const [entranceChangeID, setEntranceChangeID] = useState('1');

    console.log("ROUTE PARAMS:", route.params);
    const colRef = collection(db, 'houses', `${route.params.houseID}`, 'entranceIDs'); // Collection reference for entrances collection for firebase access

    useEffect(() => {
        // Function to fetch data from webhook.site of new entrance update
        const fetchData = async () => {
            // GET request sent to webhook.site using unique token generated by webhook.site 
            //fetch('http://webhook.site/token/007347fc-f34d-4286-88d8-a10bbb8b2292/request/latest')
            setLoading(true);
            try{
                const response = await axios.get('http://webhook.site/token/007347fc-f34d-4286-88d8-a10bbb8b2292/request/latest');
                // If there is no new data to be handled, then do nothing
                var values = JSON.parse(response.data.content);
                console.log("entranceChangeID before if:", entranceChangeID);
                console.log("response.data.uuid", response.data.uuid);
                if(entranceChangeID != response.data.uuid){
                    var data = {
                        name: values.value2,
                        status: values.value1,
                        created_at: response.data.created_at,
                        token_id: response.data.token_id,
                        changed: true
                    };
                    setEntranceData(data);
                    setEntranceChangeID(response.data.uuid);
                    console.log("entranceChangeID != response.data.uuid. Now we set it:", entranceChangeID);
                    console.log("New update jus dropped: ", entranceData[0]);
                }
                else {
                    var data = {
                        name: values.value2,
                        status: values.value1,
                        created_at: response.data.created_at,
                        token_id: response.data.token_id,
                        changed: false
                    };
                    setEntranceData(data);
                    setEntranceChangeID(response.data.uuid);
                    console.log("No new entrance data to handle, changed flag set to false: ", entranceData[0]);
                }
            } catch (error) {
                console.error(error.message);
            }
            setLoading(false);
        }
        
        // Getting and returning house objects to populate newEntities in parent calling function
        function getEntrancesForEachPost(entranceIDDocSnaps) {
            return Promise.all(
                entranceIDDocSnaps.map(async (entranceIDDocSnap) => {
                    const entranceDocRef = doc(db, 'entrances', entranceIDDocSnap.id);
                    const entranceDocSnap = await getDoc(entranceDocRef);
            
                    return {
                        id: entranceIDDocSnap.id,
                        ...entranceDocSnap.data(),
                    };
                })
            )
        }

        // Random function to create entranceIDs subcollection within houses documents
        const hold = async () => {
            const docRef = doc(db, 'houses', `${route.params.houseID}`, 'entranceIDs', 'WunBESVGPHmk0DDeES3t');
            updateDoc(docRef, {
                houseID: route.params.houseID
            })
        }
        //hold();
        
        /*fetchData();

        // If our entranceData is different, we add/modify the entrance document
        if(entranceData.changed == true && entranceID != "N/A"){
            //call setDoc on appropriate entrance document
            updateDoc(doc(entranceColRef, entranceID), {
                        entranceID,
                        ...entranceData,
                    })
                    .then(() => console.log("Entrance updated: ", doc(entranceColRef, entranceID).data().entranceID))
                    .catch((error) => {
                        console.log('error in RegistrationScreen.js creating a new user w email/pass')
                        alert(error)
                        console.log(error)
                    });
        }
        else {
            addDoc(entranceColRef, {...entranceData})
            .then((docRef) => {
                updateDoc(docRef, {
                    id: docRef.id,
                });
            });
        }*/
        
        navigation.setOptions({ 
            title: route.params.name+' Details',
            headerStyle: route.params.headerStyle,
            headerTintColor: route.params.headerTintColor,
        });

        let cancelPreviousPromiseChain = undefined;
        // Snapshot of houseIDs collection in users object 
        const unsubscribe = onSnapshot(colRef, 
            (snapshot) => {
                if(cancelPreviousPromiseChain) cancelPreviousPromiseChain(); // Cancel previous run if possible

                let cancelled = false; 
                cancelPreviousPromiseChain = () => cancelled = true;

                getEntrancesForEachPost(snapshot.docs)
                .then((entitiesArray) => {
                    if(cancelled) return; // cancelled, do nothing
                    setLoading(false);
                    setEntrances(entitiesArray);
                })
                .catch((error) => {
                    if(cancelled) return; // cancelled, do nothing
                    setLoading(false);
                    console.log(error);
                })
            }, 
            (error) => {
                if(cancelPreviousPromiseChain) cancelPreviousPromiseChain(); // Now the listener has errored, cancel using any stale data
                setLoading(false);
                console.log(error);
            }
        );

        return () => {
            unsubscribe(); // detaches the listener
        }
    }, []);

    console.log(entrances[0])
    // Render entrances
    const renderEntrances = ({item, index}) => {
        return (
                <View style={styles.entityContainer}>
                    <Text style={styles.entityText}>
                        Entrance: {"\t"} {item.name} {"\n\n"}Entrance ID: {item.id} {"\n\n"}
                        Status: {item.status} {"\n"} 
                        {item.status == "open" && (<Text style={styles.entityText}>Last {item.status}ed on:{"\n"}{item.created_at}</Text>)}
                        {item.status == "closed" && (<Text style={styles.entityText}>Last {item.status} on:{"\n"}{item.created_at}</Text>)}
                    </Text>
                    <Modal
                        animationType="slide"
                        transparent={true}
                        visible={modalVisible}
                        onRequestClose={() => {
                        Alert.alert("Modal has been closed.");
                        setModalVisible(!modalVisible);
                        }}
                    >
                        <View style={styles.centeredView}>
                            <View style={styles.modalView}>
                                <Text style={styles.modalText}>Hello World!</Text>
                                <Pressable
                                style={[styles.button, styles.buttonClose]}
                                onPress={() => setModalVisible(!modalVisible)}
                                >
                                    <Text style={styles.buttonText}>Hide Modal</Text>
                                </Pressable>
                            </View>
                        </View>
                    </Modal>
                    <Pressable
                        style={[styles.button, styles.buttonOpen]}
                        onPress={() => {
                            setModalVisible(true);
                            onEditButtonPress();
                        }}
                    >
                        <Text style={styles.buttonText}>Edit</Text>
                    </Pressable>
                </View>
        );
    }

    const onChatButtonPress = () => {
        return( // navigate to chat page
            navigation.navigate('Chat', {
                houseID: route.params.id,
                name: route.params.name,
                headerStyle: {
                    backgroundColor: '#EF3340'
                },
                headerTintColor: 'black',
                extraData: route.params.extraData
            })
        );
    }

    const onEditButtonPress = () => {
        //IMPLEMENT
        console.log("Edit button pressed!")
    }

    return(
        <View style={styles.container}>
            <TouchableOpacity style={styles.button} onPress={onChatButtonPress}>
                <Text style={styles.buttonText}>Chat</Text>
            </TouchableOpacity>
            <Text style={styles.entityText}>Chat with users in {route.params.name}</Text>
            {loading && <Text>Loading</Text>}
            { !entrances.length && <Text>No entrances logged for this house!</Text> }
            { !loading && (entrances && (
                <View style={styles.listContainer}>
                    <FlatList
                        data={entrances}
                        renderItem={renderEntrances}
                        keyExtractor={(item) => item.id}
                        removeClippedSubviews={true}
                        ListHeaderComponent={()=> {
                            return (
                                <View style={styles.header}> 
                                    <Text style={styles.headerText}>{route.params.name}'s Entrances 
                                        {"\n(Tap on an Entrance to view its details!)"}</Text> 
                                </View>
                            )
                        }}
                    />
                </View>)
            )}
        </View>
    )
}